plugins {
    id 'org.springframework.boot' version '2.1.16.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

group = '${groupId}'
version = '${version}'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.JarLauncher'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    into('lib') {
        from configurations.runtime
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

project.ext {
    springSecurityCryptoVersion = '5.1.2.RELEASE'
    mybatisVersion = '2.1.3'
    happyDevVersion = '3.1.0'
    janinoVersion = '3.1.2'
    swaggerVersion = '2.9.2'
    aliJsonVersion = '1.1.15'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.security:spring-security-crypto:$springSecurityCryptoVersion"
    implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:$mybatisVersion"
    implementation "com.llw:happy-dev:$happyDevVersion"
    implementation "org.codehaus.janino:janino:$janinoVersion"
    implementation "org.codehaus.janino:commons-compiler:$janinoVersion"
    implementation "io.springfox:springfox-swagger2:$swaggerVersion"
    implementation "io.springfox:springfox-swagger-ui:$swaggerVersion"
    implementation "com.alibaba:fastjson:$aliJsonVersion"
    runtimeOnly 'mysql:mysql-connector-java'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompile "org.projectlombok:lombok"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

/**
 * 部署
 * 执行$ gradle build
 * 生成build/libs/demo-0.0.1-SNAPSHOT.jar
 * 先同步数据库
 * $ java -cp demo-0.0.1-SNAPSHOT.jar -Dloader.main=com.happydev.demo.init.DbSyncTaskProd org.springframework.boot.loader.PropertiesLauncher
 * 再启动服务
 * $ nohup java -jar demo-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod >/dev/null 2>&1 &
 */

/**生成基础代码task*/
task code (type: JavaExec, dependsOn: classes) {
    main = 'com.happy.express.code.BasicCodeGenerator'
    classpath = sourceSets.main.compileClasspath
    args ([basePackagePath] as String[])
}

/**表生成task*/
//生成表格task(开发环境, 检查数据库表字段)
task devCheck (type: JavaExec, dependsOn: classes) {
    main = 'com.happy.express.persist.mysql.TableGenerator'
    classpath = sourceSets.main.compileClasspath
    args (['dev', 'check', basePackagePath] as String[])
}
//生成表格task(开发环境, 执行增量操作)
task devIncrement (type: JavaExec, dependsOn: classes) {
    main = 'com.happy.express.persist.mysql.TableGenerator'
    classpath = sourceSets.main.compileClasspath
    args (['dev', 'increment', basePackagePath] as String[])
}
//生成表格task(开发环境, 删改数据库字段)
task devForce (type: JavaExec, dependsOn: classes) {
    main = 'com.happy.express.persist.mysql.TableGenerator'
    classpath = sourceSets.main.compileClasspath
    args (['dev', 'force', basePackagePath] as String[])
}

//生成表格task(测试环境, 检查数据库表字段)
task testCheck (type: JavaExec, dependsOn: classes) {
    main = 'com.happy.express.persist.mysql.TableGenerator'
    classpath = sourceSets.main.compileClasspath
    args (['test', 'check', basePackagePath] as String[])
}
//生成表格task(测试环境, 执行增量操作)
task testIncrement (type: JavaExec, dependsOn: classes) {
    main = 'com.happy.express.persist.mysql.TableGenerator'
    classpath = sourceSets.main.compileClasspath
    args (['test', 'increment', basePackagePath] as String[])
}
//生成表格task(测试环境, 删改数据库字段)
task testForce (type: JavaExec, dependsOn: classes) {
    main = 'com.happy.express.persist.mysql.TableGenerator'
    classpath = sourceSets.main.compileClasspath
    args (['test', 'force', basePackagePath] as String[])
}

//生成表格task(生产环境, 检查数据库表字段)
task prodCheck (type: JavaExec, dependsOn: classes) {
    main = 'com.happy.express.persist.mysql.TableGenerator'
    classpath = sourceSets.main.compileClasspath
    args (['prod', 'check', basePackagePath] as String[])
}
//生成表格task(生产环境, 执行增量操作)
task prodIncrement (type: JavaExec, dependsOn: classes) {
    main = 'com.happy.express.persist.mysql.TableGenerator'
    classpath = sourceSets.main.compileClasspath
    args (['prod', 'increment', basePackagePath] as String[])
}
//生成表格task(生产环境, 删改数据库字段)
task prodForce (type: JavaExec, dependsOn: classes) {
    main = 'com.happy.express.persist.mysql.TableGenerator'
    classpath = sourceSets.main.compileClasspath
    args (['prod', 'force', basePackagePath] as String[])
}